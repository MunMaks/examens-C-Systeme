                                        L2 informatique - Université Gustave Eiffel
                                 Architecture des systèmes informatiques : Examen prémière session 2022-2023
        Durée de l’épreuve : 2 heures
        Les notes de cours, de TD et de TP ne sont pas autorisées. Les ordinateurs, calculatrices ainsi que les téléphones
        sont interdits et éteints durant l’épreuve. Il est possible à tout moment d’admettre la réponse (algorithme, fonction,
        programme, etc.) à une question non traitée à condition de le préciser explicitement. Il est très fortement préconisé de
        lire exhaustivement l’énoncé avant de commencer à répondre aux exercices.

        Les justifications et explications sont toujours plus importantes que les résultats attendus aux questions. Ainsi, la qualité
        de la rédaction de vos réponses aura un impact très important sur la notation. Fournir un résultat correct sans aucune
        explication ne donne aucun point. Fournir une explication valide avec un résultat erroné peut donner un grand nombre de
        points sur les questions.
        Le barème est juste donné à titre indicatif, il donne un indice sur la longueur et la difficulté des exercices.




/*
    Exercice 1: Questions relatives aux cours (4 points)

1) Citez des exemples de primitives dans une UAL(unité arithmétique logique) de processus?

2) Quelles informations peut-on trouver dans une inode d'un fichier?

3) Dans quel organe d'un ordinateur se trouve la mémoire la plus grande?
    Quelles sont les caractéristiques de cette mémoire.

4) Comment fonctionnent les priorités des processus sous Unix?

*/

Les réponses:
    1) opérations arithmétiques: addition, soustraction, multiplication, division
        opérations logiques: OR, AND, XOR, NOT
        opérations de décalage: décalage à gauche et décalage à droite.

    2)  Numéro d'inode : ID unique,
        Type de fichier: un fichier, un répertoire, un lien symbolique, ...,
        Permissions: Les droits d'accès (lecture, écriture, exécution),
        Nombre de liens,
        UID: ID de l'utilisateur propriétaire,
        GID: ID du groupe propriétaire,
        Taille du fichier: En octets,
        Horodatages:
            Date de dernière modification (`mtime`),
            Date de dernier accès (`atime`),
            Date de dernière modification de l'inode (`ctime`).

    3) Dans le disque dur (HDD) ou le disque SSD.
        - Par rapport aux d'autres types de mémoire, SSD et HDD ont la capacité plus grande.
        - Les données sont conservées même lorsque l'ordinateur est éteint (contrairement à RAM).
        - Les disques SSD sont plus rapides que disque dur (HDD).
        - les SSD sont généralement plus résistants aux chocs et aux vibrations par rapport aux HDD
        - Les SSD offrent de meilleures performances en termes d'accès aléatoire par rapport aux HDD

    4)  Valeur de nice:
        - Chaque processus a une valeur de "nice" (gentillesse) qui varie
            de -20 (haute priorité) à 19 (basse priorité).
        - La valeur par défaut est 0.
        - Un utilisateur régulier peut augmenter la valeur de nice (baisser la priorité)
            mais ne peut pas la diminuer (augmenter la priorité) sans privilèges administratifs.

        L'ordonnanceur:
            - Les processus avec des valeurs de nice plus faibles (plus haute priorité) sont programmés
                pour s'exécuter plus souvent que ceux avec des valeurs plus élevées (plus basse priorité).

        Priorité dynamique:
            - Le noyau ajuste également dynamiquement les priorités des processus en cours d'exécution.
                Par exemple, un processus qui a utilisé beaucoup de temps CPU
                peut voir sa priorité réduite temporairement pour éviter qu'il ne monopolise le CPU.

        Priorités temps réel:
            - Unix supporte aussi des priorités temps réel
                pour les processus nécessitant un comportement prévisible et une faible latence.
                Ces priorités sont plus strictes et souvent gérées séparément des priorités des processus réguliers.





/*
    Exercice 2: Lire dans les pensées (4 points)

    1) chown root ???.cfg

    2) ls -l | grep -e "-..x..x..x" | wc -l

    3) find . -name "*.sh" | xargs chmod o-w

    4) ls -R ~/Images/ | grep -e ".png$" | wc -l

*/


Les réponses:
    1) Donner la priorité du fichier qui a 3 lettres et l'extension `cfg` à root.

    2) Compter le nombre de fichiers qui ont les droits d'exécutions pour tout le monde.

    3) Enlever les droits d'écriture pour les autres `others` pour
        tous les fichiers avec l'extension `sh` dans le répertoire ./

    4) Compter le nombre d'images avec l'extension `png` dans le répertoire Images/
        et ses sous-répertoires.





/*
    Exercice 3: Changement de base (4 points)

    49 6E 63 72 6F 79 61 62 6C 65 21
    Qu'esseyait donc d'écrire le programme éxécuté?


    On peut transformer tous les chiffres en décimal/binaire comme vous voulez.
    A la fin, nous avons une feuille avec le tableau ASCII.
    Je vous recommande fortement de l'utiliser. 

    49 6E 63 72 6F 79 61 62 6C 65 21
    I  n  c  r  o  y  a  b  l  e  !            
 
*/





/*
    Exercice 4. Maximum sur trois valeurs(4 points)
*/

// si vous voulez tester sur Platon/Little Thinker
// vous pouvez changer `a` à `#-1`, c'est pour que Platon accepte votre solution

1. ld $20 a
2. ld $21 #0
3. ld $22 #1
4. cmp #0
5. bfup 7
6. bfdn 8
7. mv #0 a
8. cmp #1
9. bfup 11
10. bfdn 13
11. st #1 $23
12. exit $23
13. st a $23
14. exit $23


/*
    Exercice 5: Damier binaire (4 points)
*/

                AB
         00   01   10   11
    00 | 0  | 1  | 1  | 0
CD  01 | 1  | 0  | 0  | 1
    10 | 1  | 0  | 0  | 1
    11 | 0  | 1  | 1  | 0

1) une expression logique algébrique: (A xor B) xor (C xor D)


2)

    A   B   C   D
    |   |   |   |
     xor     xor
       \     /   
        \   /    
         xor
          |
       résultat



Exercice 6: Statistiques sur Premier Langage Platon (6 points)

    log.csv:
    indices:  1       2       3        4        5           6        7       8   
            login, exo_id, exo_name, note, graine_alea, timestamp, tp_id, tp_name


    1) Proposez une commande qui affiche le nombre de fois que l'utilisateur `nborie`
        a obtenu la note maximal de 100 sur 100.

    2) Proposez une commande qui affiche la liste des exercices, sans répétitions, pour lesquels l'utilisateur
        `drevuz` a obtenu la note de 0 sur 100.

    3) Proposez une commande comptant le nombre d'utilisateurs ayant travaillé sur l'exo dont d'id est 64695.

    4) Proposez une commande donnant le nom de l'exercice réussi avec la note maximale de 100 le plus souvent sur Platon.

    5) Proposez une commande donnant le nom de l'exercice ayant été pratiqué par le plus d'utilisateurs différents.

    6) Proposez une commande qui affiche, de manière ordonnée et pour chaque utilisateur, le nombre de tp différents
        sur les quels chaque utilisateur à travaillé.


Les réponses:

    1)  à vérifier: #cat log.csv | cut -d "," -f 1,4 | grep -e "^nborie" | grep -e "100$" | wc -l
        cat log.csv | grep '^nborie' | cut -d, -f 4 | grep -c '^100$'

    2) cat log.csv | grep -e "^drevuz" | cut -d "," -f 4, 3 | grep "^[0-1]" | cut -d "," -f 2 | sort | uniq 

    3) cat log.csv | cut -d "," -f 1,2 | grep -e ",64695$" | cut -d "," -f 1 | sort | uniq | wc -l

    4) cat log.csv | cut -d "," -f 3,4 | grep -e ",100$" | cut -d "," -f 1 | sort | uniq | sort -n | tail -1

    5) cat log.csv | cut -d "," -f 1,3 | uniq | cut -d "," -f 2 | sort | uniq -c | sort -nr | head -1

    6) cat log.csv | cut -d "," -f 1,7 | uniq | cut -d "," -f 1 | sort | uniq -c | sort


Les explications:
    1) On affiche le fichier log.csv, on extrait `login` et `note`,
        on cherche le nom nborie et la note 100 et compte le nombre de lignes.

    2) On affiche le fichier log.csv, on cherche les lignes qui commencent par `drevuz`, 
        on extrait les `note` et `exo_name`, on veut que la note commence par 0 ou 1 (autrement dit n'est pas vide),
        on extrait encore les `exo_name` et on supprime les doublons avec `uniq`.

    3) On affiche le fichier log.csv, on extrait `login` et `exo_id`, on cherche veut que exo_id soit 64695,
        on prend les noms des `login`, on trie et supprime les doublons et on compte le nombre de lignes.

    4) On affiche le fichier log.csv, on extrait `exo_name` et `note`, tous les lignes avec la note 100,
        on extrait les `exo_name`, on supprime les doublons,
        `sort -n`: trie, avec l'option pour que le trie soit numérique par ordre alphabétique,
        `tail -1` (le dernier nom de l'exercice, et aussi souvent  réussi).

    5) On affiche le fichier log.csv, on extrait `login` et `exo_name`, on supprime les doublons,
        on extrait les `exo_name`, les trier par table ASCII,
        `uniq -c`: supprime les doublons, avec l'option pour préfixer les lignes par le nombre d'occurrences,
        on trie ces occurrences par ordre décroissant (-r ça nous dit `reverse`),
        et on affiche le premier exercice pratiqué par le plus d'utilisateurs différents.
 

    6) On affiche le fichier log.csv, on extrait `login` et `tp_id`,
        on supprime les doublons pour avoir `(login, tp_id)`,
        `sort | uniq -c`: compte le nombre d'occurrences uniques de chaque utilisateur.
        et on trie la dernière fois ces couples pour avoir la manière ordonnée.

