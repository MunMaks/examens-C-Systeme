                                        L2 informatique - Université Gustave Eiffel
                                 Architecture des systèmes informatiques : Examen prémière session 2022-2023
        Durée de l’épreuve : 2 heures
        Les notes de cours, de TD et de TP ne sont pas autorisées. Les ordinateurs, calculatrices ainsi que les téléphones
        sont interdits et éteints durant l’épreuve. Il est possible à tout moment d’admettre la réponse (algorithme, fonction,
        programme, etc.) à une question non traitée à condition de le préciser explicitement. Il est très fortement préconisé de
        lire exhaustivement l’énoncé avant de commencer à répondre aux exercices.

        Les justifications et explications sont toujours plus importantes que les résultats attendus aux questions. Ainsi, la qualité
        de la rédaction de vos réponses aura un impact très important sur la notation. Fournir un résultat correct sans aucune
        explication ne donne aucun point. Fournir une explication valide avec un résultat erroné peut donner un grand nombre de
        points sur les questions.
        Le barème est juste donné à titre indicatif, il donne un indice sur la longueur et la difficulté des exercices.




/*
    Exercice 1: Questions relatives aux cours (4 points)

1) Citez des exemples de primitives dans une UAL(unité arithmétique logique) de processus?

2) Quelles informations peut-on trouver dans une inode d'un fichier?

3) Dans quel organe d'un ordinateur se trouve la mémoire la plus grande?
    Quelles sont les caractéristiques de cette mémoire.

4) Comment fonctionnent les priorités des processus sous Unix?

*/

Les réponses:
    1) opérations arithmétiques: addition, soustraction, multiplication, division
        opérations logiques: OR, AND, XOR, NOT
        opérations de décalage: décalage à gauche et décalage à droite.

    2)  Numéro d'inode : ID unique,
        Type de fichier: un fichier, un répertoire, un lien symbolique, ...,
        Permissions: Les droits d'accès (lecture, écriture, exécution),
        Nombre de liens,
        UID: ID de l'utilisateur propriétaire,
        GID: ID du groupe propriétaire,
        Taille du fichier: En octets,
        Horodatages:
            Date de dernière modification (`mtime`),
            Date de dernier accès (`atime`),
            Date de dernière modification de l'inode (`ctime`).

    3) Dans le disque dur (HDD) ou le disque SSD.
        - Par rapport aux d'autres types de mémoire, SSD et HDD ont la capacité plus grande.
        - Les données sont conservées même lorsque l'ordinateur est éteint (contrairement à RAM).
        - Les disques SSD sont plus rapides que disque dur (HDD).
        - les SSD sont généralement plus résistants aux chocs et aux vibrations par rapport aux HDD
        - Les SSD offrent de meilleures performances en termes d'accès aléatoire par rapport aux HDD

    4)  Valeur de nice:
        - Chaque processus a une valeur de "nice" (gentillesse) qui varie
            de -20 (haute priorité) à 19 (basse priorité).
        - La valeur par défaut est 0.
        - Un utilisateur régulier peut augmenter la valeur de nice (baisser la priorité)
            mais ne peut pas la diminuer (augmenter la priorité) sans privilèges administratifs.

        L'ordonnanceur:
            - Les processus avec des valeurs de nice plus faibles (plus haute priorité) sont programmés
                pour s'exécuter plus souvent que ceux avec des valeurs plus élevées (plus basse priorité).

        Priorité dynamique:
            - Le noyau ajuste également dynamiquement les priorités des processus en cours d'exécution.
                Par exemple, un processus qui a utilisé beaucoup de temps CPU
                peut voir sa priorité réduite temporairement pour éviter qu'il ne monopolise le CPU.

        Priorités temps réel:
            - Unix supporte aussi des priorités temps réel
                pour les processus nécessitant un comportement prévisible et une faible latence.
                Ces priorités sont plus strictes et souvent gérées séparément des priorités des processus réguliers.





/*

    Exercice 2: Lire dans les pensées (4 points)

    1) chown root ???.cfg

    2) ls -l | grep -e "-..x..x..x" | wc -l

    3) find . -name "*.sh" | xargs chmod o-w

    4) ls -R ~/Images/ | grep -e ".png$" | wc -l

*/


Les réponses:
    1) Donner la priorité du fichier qui a 3 lettres et l'extension `cfg` à root.

    2) Compter le nombre de fichiers qui ont les droits d'exécutions pour tout le monde.

    3) Enlever les droits d'écriture pour les autres `others` pour
        tous les fichiers avec l'extension `sh` dans le répertoire ./

    4) Compter le nombre d'images avec l'extension `png` dans le répertoire Images/
        et ses sous-répertoires.






/*
    Exercice 3: Changement de base (4 points)

    49 6E 63 72 6F 79 61 62 6C 65 21
    Qu'esseyait donc d'écrire le programme éxécuté?


    On peut transformer tous les chiffres en décimal/binaire comme vous voulez.
    A la fin, nous avons une feuille avec le tableau ASCII.
    Je vous recommande fortement de l'utiliser. 

    49 6E 63 72 6F 79 61 62 6C 65 21
    I  n  c  r  o  y  a  b  l  e  !            
 
*/



/*
    Exercice 4. Maximum sur trois valeurs(4 points)
*/


// si vous voulez tester sur Platon
// vous pouvez changer `a` à `#-1`, c'est pour que Platon accepte votre solution

1. ld $20 a
2. ld $21 #0
3. ld $22 #1
4. cmp #0
5. bfup 7
6. bfdn 8
7. mv #0 a
8. cmp #1
9. bfup 11
10. bfdn 13
11. st #1 $23
12. exit $23
13. st a $23
14. exit $23


/*
    Exercice 5: Damier binaire (4 points)
*/

                AB
         00   01   10   11
    00 | 0  | 1  | 1  | 0
CD  01 | 1  | 0  | 0  | 1
    10 | 1  | 0  | 0  | 1
    11 | 0  | 1  | 1  | 0

1) une expression logique algébrique: (A xor B) xor (C xor D)


2)

    A   B   C   D
    |   |   |   |
     xor     xor
       \     /   
        \   /    
         xor
          |
       résultat



Exercice 6: Statistiques sur Premier Langage Platon (6 points)

Les commandes UNIX to do ce week-end
1) 

2) 

3) 

4) 

5) 

6) 





